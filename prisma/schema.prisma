// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Enrollment {
  enrollment_id Int  @id @default(autoincrement())
  course_id     Int
  user_id       Int
  user_role     Int  @default(0)
  total_points  Int?

  course Course @relation(fields: [course_id], references: [course_id])
  user   User   @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, course_id])
  @@map("enrollments")
}

model User {
  user_id       Int     @id @default(autoincrement())
  username      String  @unique
  user_password String
  pw_salt       String
  is_teacher    Boolean @default(false)

  enrollments           Enrollment[]
  submitted_assignments AssignmentSolution[]
  submitted_exercises   ExerciseSolution[]

  @@map("users")
}

model Course {
  course_id Int    @id @default(autoincrement())
  title     String @unique

  enrollments Enrollment[]
  sessions    Session[]
  assignments Assignment[]

  @@map("courses")
}

model Assignment { //TODO: visibility?
  assignment_id        Int      @id @default(autoincrement())
  course_id            Int
  title                String
  description          String
  code_template        String
  due_date             DateTime
  programming_language String

  course    Course               @relation(fields: [course_id], references: [course_id])
  solutions AssignmentSolution[]

  @@map("assignments")
}

model AssignmentSolution {
  assignment_solution_id Int    @id @default(autoincrement())
  assignment_id          Int
  user_id                Int
  solution               String
  feedback               String? //TODO: line-specefic feedback like when reviewing on GH?

  assignment Assignment @relation(fields: [assignment_id], references: [assignment_id])
  user       User       @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, assignment_id])
  @@map("assignment_solutions")
}

model Session {
  session_id Int    @id @default(autoincrement())
  title      String @unique
  course_id  Int

  course    Course     @relation(fields: [course_id], references: [course_id])
  exercises Exercise[]

  @@map("sessions")
}

model Exercise {
  exercise_id          Int    @id @default(autoincrement())
  session_id           Int
  title                String @unique
  description          String
  points               Int
  programming_language String
  code_template        String

  session   Session            @relation(fields: [session_id], references: [session_id])
  test_case TestCase[]
  hints     Hint[]
  solutions ExerciseSolution[]

  @@map("exercises")
}

model TestCase {
  test_case_id Int     @id @default(autoincrement())
  exercise_id  Int
  code         String
  is_visible   Boolean

  exercise Exercise @relation(fields: [exercise_id], references: [exercise_id])

  @@map("test_cases")
}

model Hint {
  hint_id     Int    @id @default(autoincrement())
  exercise_id Int
  description String
  order       Int

  exercise Exercise @relation(fields: [exercise_id], references: [exercise_id])

  @@unique([hint_id, order])
  @@map("hints")
}

model ExerciseSolution {
  exercise_solution_id Int     @id @default(autoincrement())
  exercise_id          Int
  user_id              Int
  solution             String
  is_anonymous         Boolean @default(true)
  is_pinned            Boolean @default(false)

  exercise Exercise @relation(fields: [exercise_id], references: [exercise_id])
  user     User     @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, exercise_id])
  @@map("exercise_solutions")
}
